import{_ as e,c as a,a as n,o as i}from"./app-DGEpm61U.js";const r={};function l(t,s){return i(),a("div",null,s[0]||(s[0]=[n(`<h1 id="使用nginx及docker部署code-server" tabindex="-1"><a class="header-anchor" href="#使用nginx及docker部署code-server"><span>使用nginx及Docker部署Code Server</span></a></h1><h2 id="docker启动code-server" tabindex="-1"><a class="header-anchor" href="#docker启动code-server"><span>Docker启动Code Server</span></a></h2><h3 id="创建目录挂载目录" tabindex="-1"><a class="header-anchor" href="#创建目录挂载目录"><span>创建目录挂载目录</span></a></h3><p>以挂在目录为test目录为例</p><h4 id="创建及配置config文件" tabindex="-1"><a class="header-anchor" href="#创建及配置config文件"><span>创建及配置config文件</span></a></h4><p><a href="https://coder.com/docs/code-server/latest/FAQ#how-does-the-config-file-work" target="_blank" rel="noopener noreferrer">config文件配置</a></p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># \\test\\.config\\code-server\\config.yaml</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bind-addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">127.0.0.1:8080</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">auth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">none</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>项目文件为地址为：\\test\\project</p></blockquote><h4 id="启动docker" tabindex="-1"><a class="header-anchor" href="#启动docker"><span>启动docker</span></a></h4><p><a href="https://coder.com/docs/code-server/latest/install" target="_blank" rel="noopener noreferrer">参考文档</a></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> code-server</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8080:8080</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -auth</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> none</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/test:/home/coder/</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  codercom/code-server:latest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>code-server默认需要密码访问可通过配置config文件<code>auth: none</code>去除登录校验<br> 或者在启动命令时添加<code>-auth none</code></p></blockquote><h2 id="使用nginx代理-同时代理http和websocket请求" tabindex="-1"><a class="header-anchor" href="#使用nginx代理-同时代理http和websocket请求"><span>使用Nginx代理(同时代理http和websocket请求)</span></a></h2><p><a href="https://coder.com/docs/code-server/latest/guide#using-lets-encrypt-with-nginx" target="_blank" rel="noopener noreferrer">nginx</a><a href="https://github.com/coder/code-server/issues/6014" target="_blank" rel="noopener noreferrer">websocket代理失败参考</a></p><div class="language-conf line-numbers-mode" data-highlighter="shiki" data-ext="conf" data-title="conf" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>http {</span></span>
<span class="line"><span>  # 自定义变量 $connection_upgrade</span></span>
<span class="line"><span>  map $http_upgrade $connection_upgrade {</span></span>
<span class="line"><span>          default Upgrade;</span></span>
<span class="line"><span>          &#39;&#39;      close;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  map $host $docker_host {</span></span>
<span class="line"><span>    default 192.168.50.230;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  server {</span></span>
<span class="line"><span>    listen 10073;</span></span>
<span class="line"><span>    location / {</span></span>
<span class="line"><span>        proxy_http_version 1.1;  # 添加长连接支持</span></span>
<span class="line"><span>        proxy_pass http://$docker_host:10073;</span></span>
<span class="line"><span>        proxy_set_header HOST $host;</span></span>
<span class="line"><span>        proxy_set_header X-Forwarded-Host $host:$server_port;</span></span>
<span class="line"><span>        proxy_set_header Upgrade $http_upgrade;</span></span>
<span class="line"><span>        proxy_set_header Connection upgrade;</span></span>
<span class="line"><span>        proxy_set_header Accept-Encoding gzip;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="proxy-http-version-1-1-说明" tabindex="-1"><a class="header-anchor" href="#proxy-http-version-1-1-说明"><span>proxy_http_version 1.1 说明</span></a></h3><p>nginx在反向代理HTTP协议的时候，默认使用的是HTTP1.0去向后端服务器获取响应的内容后在返回给客户端。<br> HTTP1.0和HTTP1.1的一个不同之处就是，HTTP1.0不支持HTTP keep-alive。<br> 如果要转发Websocket请求，必须要指定 proxy_http_version 1.1 主要是为了长连接有效<br> 如果发现<strong>websocket链接成功后又马上断开</strong>则需要检查是否添加该配置。</p><h3 id="x-forwarded-for-说明" tabindex="-1"><a class="header-anchor" href="#x-forwarded-for-说明"><span>X-Forwarded-For 说明</span></a></h3><p>如果websocket请求用户校验一直无法通过可以尝试添加该配置解决问题,为向服务器提供更有用的客户端 IP 地址<br> 具体作用可参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Forwarded-For" target="_blank" rel="noopener noreferrer">X-Forwarded-For</a></p><h2 id="两服务器目录文件的数据同步" tabindex="-1"><a class="header-anchor" href="#两服务器目录文件的数据同步"><span>两服务器目录文件的数据同步</span></a></h2><p>SSHFS（SSH Filesystem）是一个基于FUSE的文件系统客户端，用于通过SSH连接远程目录。SSHFS使用的是SFTP协议，它是SSH的一个子系统，在大多数SSH服务器上默认启用</p><p>与其他网络文件系统（如NFS和Samba）相比，SSHFS的优势在于它不需要在服务器端进行任何额外的配置。要使用SSHFS，您只需要SSH访问远程服务器。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sshfs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> usr@host:/dir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /dir</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,23)]))}const p=e(r,[["render",l],["__file","code_server.html.vue"]]),h=JSON.parse('{"path":"/practice/code_server.html","title":"使用nginx及Docker部署Code Server","lang":"zh-CN","frontmatter":{"date":"2023-09-01T00:00:00.000Z","category":"实践","tag":["docker","nginx","websocket"]},"headers":[{"level":2,"title":"Docker启动Code Server","slug":"docker启动code-server","link":"#docker启动code-server","children":[{"level":3,"title":"创建目录挂载目录","slug":"创建目录挂载目录","link":"#创建目录挂载目录","children":[]}]},{"level":2,"title":"使用Nginx代理(同时代理http和websocket请求)","slug":"使用nginx代理-同时代理http和websocket请求","link":"#使用nginx代理-同时代理http和websocket请求","children":[{"level":3,"title":"proxy_http_version 1.1 说明","slug":"proxy-http-version-1-1-说明","link":"#proxy-http-version-1-1-说明","children":[]},{"level":3,"title":"X-Forwarded-For 说明","slug":"x-forwarded-for-说明","link":"#x-forwarded-for-说明","children":[]}]},{"level":2,"title":"两服务器目录文件的数据同步","slug":"两服务器目录文件的数据同步","link":"#两服务器目录文件的数据同步","children":[]}],"git":{"createdTime":1732934976000,"updatedTime":1732934976000},"readingTime":{"minutes":1.86,"words":559},"filePathRelative":"practice/code_server.md","localizedDate":"2023年9月1日"}');export{p as comp,h as data};
